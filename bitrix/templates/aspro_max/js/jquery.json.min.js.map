{"version":3,"sources":["jquery.json.js"],"names":["$","escape","meta","\b","\t","\n","\f","\r","\"","\\","hasOwn","Object","prototype","hasOwnProperty","toJSON","JSON","_typeof","stringify","o","k","name","val","type","String","quoteString","getUTCMonth","day","year","getUTCFullYear","hours","minutes","seconds","getUTCSeconds","milli","month","getUTCDate","isArray","length","pairs","push","join","call","evalJSON","parse","str","eval","secureEvalJSON","filtered","replace","test","SyntaxError","match","a","c","charCodeAt","Math","floor","toString","jQuery"],"mappings":"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","file":"jquery.json.min.js","sourcesContent":["/**\n * jQuery JSON plugin v2.5.1\n * https://github.com/Krinkle/jquery-json\n *\n * @author Brantley Harris, 2009-2011\n * @author Timo Tijhof, 2011-2014\n * @source This plugin is heavily influenced by MochiKit's serializeJSON, which is\n *         copyrighted 2005 by Bob Ippolito.\n * @source Brantley Harris wrote this plugin. It is based somewhat on the JSON.org\n *         website's http://www.json.org/json2.js, which proclaims:\n *         \"NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\", a sentiment that\n *         I uphold.\n * @license MIT License <http://opensource.org/licenses/MIT>\n */\n(function ($) {\n\t'use strict';\n\n\tvar escape = /[\"\\\\\\x00-\\x1f\\x7f-\\x9f]/g,\n\t\tmeta = {\n\t\t\t'\\b': '\\\\b',\n\t\t\t'\\t': '\\\\t',\n\t\t\t'\\n': '\\\\n',\n\t\t\t'\\f': '\\\\f',\n\t\t\t'\\r': '\\\\r',\n\t\t\t'\"': '\\\\\"',\n\t\t\t'\\\\': '\\\\\\\\'\n\t\t},\n\t\thasOwn = Object.prototype.hasOwnProperty;\n\n\t/**\n\t * jQuery.toJSON\n\t * Converts the given argument into a JSON representation.\n\t *\n\t * @param o {Mixed} The json-serializable *thing* to be converted\n\t *\n\t * If an object has a toJSON prototype, that will be used to get the representation.\n\t * Non-integer/string keys are skipped in the object, as are keys that point to a\n\t * function.\n\t *\n\t */\n\t$.toJSON = typeof JSON === 'object' && JSON.stringify ? JSON.stringify : function (o) {\n\t\tif (o === null) {\n\t\t\treturn 'null';\n\t\t}\n\n\t\tvar pairs, k, name, val,\n\t\t\ttype = $.type(o);\n\n\t\tif (type === 'undefined') {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Also covers instantiated Number and Boolean objects,\n\t\t// which are typeof 'object' but thanks to $.type, we\n\t\t// catch them here. I don't know whether it is right\n\t\t// or wrong that instantiated primitives are not\n\t\t// exported to JSON as an {\"object\":..}.\n\t\t// We choose this path because that's what the browsers did.\n\t\tif (type === 'number' || type === 'boolean') {\n\t\t\treturn String(o);\n\t\t}\n\t\tif (type === 'string') {\n\t\t\treturn $.quoteString(o);\n\t\t}\n\t\tif (typeof o.toJSON === 'function') {\n\t\t\treturn $.toJSON(o.toJSON());\n\t\t}\n\t\tif (type === 'date') {\n\t\t\tvar month = o.getUTCMonth() + 1,\n\t\t\t\tday = o.getUTCDate(),\n\t\t\t\tyear = o.getUTCFullYear(),\n\t\t\t\thours = o.getUTCHours(),\n\t\t\t\tminutes = o.getUTCMinutes(),\n\t\t\t\tseconds = o.getUTCSeconds(),\n\t\t\t\tmilli = o.getUTCMilliseconds();\n\n\t\t\tif (month < 10) {\n\t\t\t\tmonth = '0' + month;\n\t\t\t}\n\t\t\tif (day < 10) {\n\t\t\t\tday = '0' + day;\n\t\t\t}\n\t\t\tif (hours < 10) {\n\t\t\t\thours = '0' + hours;\n\t\t\t}\n\t\t\tif (minutes < 10) {\n\t\t\t\tminutes = '0' + minutes;\n\t\t\t}\n\t\t\tif (seconds < 10) {\n\t\t\t\tseconds = '0' + seconds;\n\t\t\t}\n\t\t\tif (milli < 100) {\n\t\t\t\tmilli = '0' + milli;\n\t\t\t}\n\t\t\tif (milli < 10) {\n\t\t\t\tmilli = '0' + milli;\n\t\t\t}\n\t\t\treturn '\"' + year + '-' + month + '-' + day + 'T' +\n\t\t\t\thours + ':' + minutes + ':' + seconds +\n\t\t\t\t'.' + milli + 'Z\"';\n\t\t}\n\n\t\tpairs = [];\n\n\t\tif ($.isArray(o)) {\n\t\t\tfor (k = 0; k < o.length; k++) {\n\t\t\t\tpairs.push($.toJSON(o[k]) || 'null');\n\t\t\t}\n\t\t\treturn '[' + pairs.join(',') + ']';\n\t\t}\n\n\t\t// Any other object (plain object, RegExp, ..)\n\t\t// Need to do typeof instead of $.type, because we also\n\t\t// want to catch non-plain objects.\n\t\tif (typeof o === 'object') {\n\t\t\tfor (k in o) {\n\t\t\t\t// Only include own properties,\n\t\t\t\t// Filter out inherited prototypes\n\t\t\t\tif (hasOwn.call(o, k)) {\n\t\t\t\t\t// Keys must be numerical or string. Skip others\n\t\t\t\t\ttype = typeof k;\n\t\t\t\t\tif (type === 'number') {\n\t\t\t\t\t\tname = '\"' + k + '\"';\n\t\t\t\t\t} else if (type === 'string') {\n\t\t\t\t\t\tname = $.quoteString(k);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\ttype = typeof o[k];\n\n\t\t\t\t\t// Invalid values like these return undefined\n\t\t\t\t\t// from toJSON, however those object members\n\t\t\t\t\t// shouldn't be included in the JSON string at all.\n\t\t\t\t\tif (type !== 'function' && type !== 'undefined') {\n\t\t\t\t\t\tval = $.toJSON(o[k]);\n\t\t\t\t\t\tpairs.push(name + ':' + val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn '{' + pairs.join(',') + '}';\n\t\t}\n\t};\n\n\t/**\n\t * jQuery.evalJSON\n\t * Evaluates a given json string.\n\t *\n\t * @param str {String}\n\t */\n\t$.evalJSON = typeof JSON === 'object' && JSON.parse ? JSON.parse : function (str) {\n\t\t/*jshint evil: true */\n\t\treturn eval('(' + str + ')');\n\t};\n\n\t/**\n\t * jQuery.secureEvalJSON\n\t * Evals JSON in a way that is *more* secure.\n\t *\n\t * @param str {String}\n\t */\n\t$.secureEvalJSON = typeof JSON === 'object' && JSON.parse ? JSON.parse : function (str) {\n\t\tvar filtered =\n\t\t\tstr\n\t\t\t.replace(/\\\\[\"\\\\\\/bfnrtu]/g, '@')\n\t\t\t.replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']')\n\t\t\t.replace(/(?:^|:|,)(?:\\s*\\[)+/g, '');\n\n\t\tif (/^[\\],:{}\\s]*$/.test(filtered)) {\n\t\t\t/*jshint evil: true */\n\t\t\treturn eval('(' + str + ')');\n\t\t}\n\t\tthrow new SyntaxError('Error parsing JSON, source is not valid.');\n\t};\n\n\t/**\n\t * jQuery.quoteString\n\t * Returns a string-repr of a string, escaping quotes intelligently.\n\t * Mostly a support function for toJSON.\n\t * Examples:\n\t * >>> jQuery.quoteString('apple')\n\t * \"apple\"\n\t *\n\t * >>> jQuery.quoteString('\"Where are we going?\", she asked.')\n\t * \"\\\"Where are we going?\\\", she asked.\"\n\t */\n\t$.quoteString = function (str) {\n\t\tif (str.match(escape)) {\n\t\t\treturn '\"' + str.replace(escape, function (a) {\n\t\t\t\tvar c = meta[a];\n\t\t\t\tif (typeof c === 'string') {\n\t\t\t\t\treturn c;\n\t\t\t\t}\n\t\t\t\tc = a.charCodeAt();\n\t\t\t\treturn '\\\\u00' + Math.floor(c / 16).toString(16) + (c % 16).toString(16);\n\t\t\t}) + '\"';\n\t\t}\n\t\treturn '\"' + str + '\"';\n\t};\n\n}(jQuery));\n"]}