{"version":3,"sources":["jquery.autocomplete.js"],"names":["factory","define","amd","exports","_typeof","require","jQuery","utils","escapeRegExChars","value","replace","createNode","containerClass","document","createElement","div","style","position","display","keys","DOWN","$","noop","el","options","that","this","element","suggestions","badQueries","selectedIndex","currentValue","timeoutId","cachedResponse","onChangeTimeout","onChange","isLocal","suggestionsContainer","Autocomplete","defaults","noSuggestionsContainer","suggestion","hintValue","hint","initialize","setOptions","ajaxSettings","autoSelectFirst","appendTo","serviceUrl","lookup","onSelect","width","minChars","maxHeight","deferRequestBy","_formatResult","pattern","RegExp","_formatGroup","params","category","formatResult","formatGroup","delimiter","zIndex","type","noCache","onSearchStart","onSearchComplete","onSearchError","preserveInput","tabDisabled","dataType","currentRequest","triggerSelectOnValidInput","originalQuery","queryLowerCase","toLowerCase","indexOf","preventBadQueries","lookupFilter","response","parseJSON","paramName","transformResult","_transformResult","showNoSuggestionNotice","noSuggestionNotice","suggestionSelector","container","classes","selected","setAttribute","html","get","activate","data","on","select","removeClass","fixPosition","clearTimeout","blurTimeoutId","window","visible","onKeyUp","fixPositionCapture","e","onKeyPress","onBlur","onFocus","val","length","onValueChange","setTimeout","hide","abortAjax","abort","extend","suppliedOptions","isArray","verifySuggestionsFormat","orientation","max-height","clearCache","disable","containerHeight","styles","height","offset","bottomOverflow","opacity","$container","parent","body","forceFixPosition","containerParent","outerHeight","top","left","scrollTop","viewPortHeight","topOverflow","css","show","parentOffsetDiff","offsetParent","outerWidth","isCursorAtEnd","selectionStart","valLength","range","selection","createRange","moveStart","disabled","which","onHint","selectHint","moveUp","moveDown","stopImmediatePropagation","preventDefault","suggest","findBestHint","query","getQuery","call","onInvalidateSelection","isExactMatch","getSuggestions","parts","split","trim","getSuggestionsLocal","filter","lookupLimit","limit","parseInt","slice","q","cacheKey","ignoreParams","isFunction","isBadQuery","processResponse","result","fail","jqXHR","textStatus","errorThrown","i","onHide","signalHint","groupBy","className","classSelected","currentCategory","each","adjustContainerWidth","detach","beforeRender","children","first","addClass","noSuggestions","empty","append","bestMatch","foundMatch","substr","map","validateOrientation","fallback","inArray","push","index","activeItem","adjustScroll","heightDelta","offsetTop","upperBound","lowerBound","onSelectCallback","getValue","dispose","removeData","off","remove","args","dataKey","arguments","instance","inputElement","devbridgeAutocomplete","fn","autocomplete"],"mappings":"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","file":"jquery.autocomplete.min.js","sourcesContent":["/**\n*  Ajax Autocomplete for jQuery, version %version%\n*  (c) 2017 Tomas Kirda\n*\n*  Ajax Autocomplete for jQuery is freely distributable under the terms of an MIT-style license.\n*  For details, see the web site: https://github.com/devbridge/jQuery-Autocomplete\n*/\n\n/*jslint  browser: true, white: true, single: true, this: true, multivar: true */\n/*global define, window, document, jQuery, exports, require */\n\n// Expose plugin as an AMD module if AMD loader is present:\n(function (factory) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['jquery'], factory);\n    } else if (typeof exports === 'object' && typeof require === 'function') {\n        // Browserify\n        factory(require('jquery'));\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n}(function ($) {\n    'use strict';\n\n    var\n        utils = (function () {\n            return {\n                escapeRegExChars: function (value) {\n                    return value.replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\n                },\n                createNode: function (containerClass) {\n                    var div = document.createElement('div');\n                    div.className = containerClass;\n                    div.style.position = 'absolute';\n                    div.style.display = 'none';\n                    return div;\n                }\n            };\n        }()),\n\n        keys = {\n            ESC: 27,\n            TAB: 9,\n            RETURN: 13,\n            LEFT: 37,\n            UP: 38,\n            RIGHT: 39,\n            DOWN: 40\n        },\n\n        noop = $.noop;\n\n    function Autocomplete(el, options) {\n        var that = this;\n\n        // Shared variables:\n        that.element = el;\n        that.el = $(el);\n        that.suggestions = [];\n        that.badQueries = [];\n        that.selectedIndex = -1;\n        that.currentValue = that.element.value;\n        that.timeoutId = null;\n        that.cachedResponse = {};\n        that.onChangeTimeout = null;\n        that.onChange = null;\n        that.isLocal = false;\n        that.suggestionsContainer = null;\n        that.noSuggestionsContainer = null;\n        that.options = $.extend({}, Autocomplete.defaults, options);\n        that.classes = {\n            selected: 'autocomplete-selected',\n            suggestion: 'autocomplete-suggestion'\n        };\n        that.hint = null;\n        that.hintValue = '';\n        that.selection = null;\n\n        // Initialize and set options:\n        that.initialize();\n        that.setOptions(options);\n    }\n\n    Autocomplete.utils = utils;\n\n    $.Autocomplete = Autocomplete;\n\n    Autocomplete.defaults = {\n            ajaxSettings: {},\n            autoSelectFirst: false,\n            appendTo: 'body',\n            serviceUrl: null,\n            lookup: null,\n            onSelect: null,\n            width: 'auto',\n            minChars: 1,\n            maxHeight: 300,\n            deferRequestBy: 0,\n            params: {},\n            formatResult: _formatResult,\n            formatGroup: _formatGroup,\n            delimiter: null,\n            zIndex: 9999,\n            type: 'GET',\n            noCache: false,\n            onSearchStart: noop,\n            onSearchComplete: noop,\n            onSearchError: noop,\n            preserveInput: false,\n            containerClass: 'autocomplete-suggestions',\n            tabDisabled: false,\n            dataType: 'text',\n            currentRequest: null,\n            triggerSelectOnValidInput: true,\n            preventBadQueries: true,\n            lookupFilter: _lookupFilter,\n            paramName: 'query',\n            transformResult: _transformResult,\n            showNoSuggestionNotice: false,\n            noSuggestionNotice: 'No results',\n            orientation: 'bottom',\n            forceFixPosition: false\n    };\n\n    function _lookupFilter(suggestion, originalQuery, queryLowerCase) {\n        return suggestion.value.toLowerCase().indexOf(queryLowerCase) !== -1;\n    };\n\n    function _transformResult(response) {\n        return typeof response === 'string' ? $.parseJSON(response) : response;\n    };\n\n    function _formatResult(suggestion, currentValue) {\n        // Do not replace anything if the current value is empty\n        if (!currentValue) {\n            return suggestion.value;\n        }\n        \n        var pattern = '(' + utils.escapeRegExChars(currentValue) + ')';\n\n        return suggestion.value\n            .replace(new RegExp(pattern, 'gi'), '<strong>$1<\\/strong>')\n            .replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n            .replace(/\"/g, '&quot;')\n            .replace(/&lt;(\\/?strong)&gt;/g, '<$1>');\n    };\n\n    function _formatGroup(suggestion, category) {\n        return '<div class=\"autocomplete-group\">' + category + '</div>';\n    };\n\n    Autocomplete.prototype = {\n\n        initialize: function () {\n            var that = this,\n                suggestionSelector = '.' + that.classes.suggestion,\n                selected = that.classes.selected,\n                options = that.options,\n                container;\n\n            // Remove autocomplete attribute to prevent native suggestions:\n            that.element.setAttribute('autocomplete', 'off');\n\n            // html() deals with many types: htmlString or Element or Array or jQuery\n            that.noSuggestionsContainer = $('<div class=\"autocomplete-no-suggestion\"></div>')\n                                          .html(this.options.noSuggestionNotice).get(0);\n\n            that.suggestionsContainer = Autocomplete.utils.createNode(options.containerClass);\n\n            container = $(that.suggestionsContainer);\n\n            container.appendTo(options.appendTo || 'body');\n\n            // Only set width if it was provided:\n            if (options.width !== 'auto') {\n                container.css('width', options.width);\n            }\n\n            // Listen for mouse over event on suggestions list:\n            container.on('mouseover.autocomplete', suggestionSelector, function () {\n                that.activate($(this).data('index'));\n            });\n\n            // Deselect active element when mouse leaves suggestions container:\n            container.on('mouseout.autocomplete', function () {\n                that.selectedIndex = -1;\n                container.children('.' + selected).removeClass(selected);\n            });\n\n\n            // Listen for click event on suggestions list:\n            container.on('click.autocomplete', suggestionSelector, function () {\n                that.select($(this).data('index'));\n            });\n\n            container.on('click.autocomplete', function () {\n                clearTimeout(that.blurTimeoutId);\n            })\n\n            that.fixPositionCapture = function () {\n                if (that.visible) {\n                    that.fixPosition();\n                }\n            };\n\n            $(window).on('resize.autocomplete', that.fixPositionCapture);\n\n            that.el.on('keydown.autocomplete', function (e) { that.onKeyPress(e); });\n            that.el.on('keyup.autocomplete', function (e) { that.onKeyUp(e); });\n            that.el.on('blur.autocomplete', function () { that.onBlur(); });\n            that.el.on('focus.autocomplete', function () { that.onFocus(); });\n            that.el.on('change.autocomplete', function (e) { that.onKeyUp(e); });\n            that.el.on('input.autocomplete', function (e) { that.onKeyUp(e); });\n        },\n\n        onFocus: function () {\n            var that = this;\n\n            that.fixPosition();\n\n            if (that.el.val().length >= that.options.minChars) {\n                that.onValueChange();\n            }\n        },\n\n        onBlur: function () {\n            var that = this;\n\n            // If user clicked on a suggestion, hide() will\n            // be canceled, otherwise close suggestions\n            that.blurTimeoutId = setTimeout(function () {\n                that.hide();\n            }, 200);\n        },\n        \n        abortAjax: function () {\n            var that = this;\n            if (that.currentRequest) {\n                that.currentRequest.abort();\n                that.currentRequest = null;\n            }\n        },\n\n        setOptions: function (suppliedOptions) {\n            var that = this,\n                options = that.options;\n\n            this.options = $.extend({}, options, suppliedOptions);\n\n            that.isLocal = $.isArray(options.lookup);\n\n            if (that.isLocal) {\n                options.lookup = that.verifySuggestionsFormat(options.lookup);\n            }\n\n            options.orientation = that.validateOrientation(options.orientation, 'bottom');\n\n            // Adjust height, width and z-index:\n            $(that.suggestionsContainer).css({\n                'max-height': options.maxHeight + 'px',\n                'width': options.width + 'px',\n                'z-index': options.zIndex\n            });\n        },\n\n\n        clearCache: function () {\n            this.cachedResponse = {};\n            this.badQueries = [];\n        },\n\n        clear: function () {\n            this.clearCache();\n            this.currentValue = '';\n            this.suggestions = [];\n        },\n\n        disable: function () {\n            var that = this;\n            that.disabled = true;\n            clearTimeout(that.onChangeTimeout);\n            that.abortAjax();\n        },\n\n        enable: function () {\n            this.disabled = false;\n        },\n\n        fixPosition: function () {\n            // Use only when container has already its content\n\n            var that = this,\n                $container = $(that.suggestionsContainer),\n                containerParent = $container.parent().get(0);\n            // Fix position automatically when appended to body.\n            // In other cases force parameter must be given.\n            if (containerParent !== document.body && !that.options.forceFixPosition) {\n                return;\n            }\n\n            // Choose orientation\n            var orientation = that.options.orientation,\n                containerHeight = $container.outerHeight(),\n                height = that.el.outerHeight(),\n                offset = that.el.offset(),\n                styles = { 'top': offset.top, 'left': offset.left };\n\n            if (orientation === 'auto') {\n                var viewPortHeight = $(window).height(),\n                    scrollTop = $(window).scrollTop(),\n                    topOverflow = -scrollTop + offset.top - containerHeight,\n                    bottomOverflow = scrollTop + viewPortHeight - (offset.top + height + containerHeight);\n\n                orientation = (Math.max(topOverflow, bottomOverflow) === topOverflow) ? 'top' : 'bottom';\n            }\n\n            if (orientation === 'top') {\n                styles.top += -containerHeight;\n            } else {\n                styles.top += height;\n            }\n\n            // If container is not positioned to body,\n            // correct its position using offset parent offset\n            if(containerParent !== document.body) {\n                var opacity = $container.css('opacity'),\n                    parentOffsetDiff;\n\n                    if (!that.visible){\n                        $container.css('opacity', 0).show();\n                    }\n\n                parentOffsetDiff = $container.offsetParent().offset();\n                styles.top -= parentOffsetDiff.top;\n                styles.left -= parentOffsetDiff.left;\n\n                if (!that.visible){\n                    $container.css('opacity', opacity).hide();\n                }\n            }\n\n            if (that.options.width === 'auto') {\n                styles.width = that.el.outerWidth() + 'px';\n            }\n\n            $container.css(styles);\n        },\n\n        isCursorAtEnd: function () {\n            var that = this,\n                valLength = that.el.val().length,\n                selectionStart = that.element.selectionStart,\n                range;\n\n            if (typeof selectionStart === 'number') {\n                return selectionStart === valLength;\n            }\n            if (document.selection) {\n                range = document.selection.createRange();\n                range.moveStart('character', -valLength);\n                return valLength === range.text.length;\n            }\n            return true;\n        },\n\n        onKeyPress: function (e) {\n            var that = this;\n\n            // If suggestions are hidden and user presses arrow down, display suggestions:\n            if (!that.disabled && !that.visible && e.which === keys.DOWN && that.currentValue) {\n                that.suggest();\n                return;\n            }\n\n            if (that.disabled || !that.visible) {\n                return;\n            }\n\n            switch (e.which) {\n                case keys.ESC:\n                    that.el.val(that.currentValue);\n                    that.hide();\n                    break;\n                case keys.RIGHT:\n                    if (that.hint && that.options.onHint && that.isCursorAtEnd()) {\n                        that.selectHint();\n                        break;\n                    }\n                    return;\n                case keys.TAB:\n                    if (that.hint && that.options.onHint) {\n                        that.selectHint();\n                        return;\n                    }\n                    if (that.selectedIndex === -1) {\n                        that.hide();\n                        return;\n                    }\n                    that.select(that.selectedIndex);\n                    if (that.options.tabDisabled === false) {\n                        return;\n                    }\n                    break;\n                case keys.RETURN:\n                    if (that.selectedIndex === -1) {\n                        that.hide();\n                        return;\n                    }\n                    that.select(that.selectedIndex);\n                    break;\n                case keys.UP:\n                    that.moveUp();\n                    break;\n                case keys.DOWN:\n                    that.moveDown();\n                    break;\n                default:\n                    return;\n            }\n\n            // Cancel event if function did not return:\n            e.stopImmediatePropagation();\n            e.preventDefault();\n        },\n\n        onKeyUp: function (e) {\n            var that = this;\n\n            if (that.disabled) {\n                return;\n            }\n\n            switch (e.which) {\n                case keys.UP:\n                case keys.DOWN:\n                    return;\n            }\n\n            clearTimeout(that.onChangeTimeout);\n\n            if (that.currentValue !== that.el.val()) {\n                that.findBestHint();\n                if (that.options.deferRequestBy > 0) {\n                    // Defer lookup in case when value changes very quickly:\n                    that.onChangeTimeout = setTimeout(function () {\n                        that.onValueChange();\n                    }, that.options.deferRequestBy);\n                } else {\n                    that.onValueChange();\n                }\n            }\n        },\n\n        onValueChange: function () {\n            var that = this,\n                options = that.options,\n                value = that.el.val(),\n                query = that.getQuery(value);\n\n            if (that.selection && that.currentValue !== query) {\n                that.selection = null;\n                (options.onInvalidateSelection || $.noop).call(that.element);\n            }\n\n            clearTimeout(that.onChangeTimeout);\n            that.currentValue = value;\n            that.selectedIndex = -1;\n\n            // Check existing suggestion for the match before proceeding:\n            if (options.triggerSelectOnValidInput && that.isExactMatch(query)) {\n                that.select(0);\n                return;\n            }\n\n            if (query.length < options.minChars) {\n                that.hide();\n            } else {\n                that.getSuggestions(query);\n            }\n        },\n\n        isExactMatch: function (query) {\n            var suggestions = this.suggestions;\n\n            return (suggestions.length === 1 && suggestions[0].value.toLowerCase() === query.toLowerCase());\n        },\n\n        getQuery: function (value) {\n            var delimiter = this.options.delimiter,\n                parts;\n\n            if (!delimiter) {\n                return value;\n            }\n            parts = value.split(delimiter);\n            return $.trim(parts[parts.length - 1]);\n        },\n\n        getSuggestionsLocal: function (query) {\n            var that = this,\n                options = that.options,\n                queryLowerCase = query.toLowerCase(),\n                filter = options.lookupFilter,\n                limit = parseInt(options.lookupLimit, 10),\n                data;\n\n            data = {\n                suggestions: $.grep(options.lookup, function (suggestion) {\n                    return filter(suggestion, query, queryLowerCase);\n                })\n            };\n\n            if (limit && data.suggestions.length > limit) {\n                data.suggestions = data.suggestions.slice(0, limit);\n            }\n\n            return data;\n        },\n\n        getSuggestions: function (q) {\n            var response,\n                that = this,\n                options = that.options,\n                serviceUrl = options.serviceUrl,\n                params,\n                cacheKey,\n                ajaxSettings;\n\n            options.params[options.paramName] = q;\n\n            if (options.onSearchStart.call(that.element, options.params) === false) {\n                return;\n            }\n\n            params = options.ignoreParams ? null : options.params;\n\n            if ($.isFunction(options.lookup)){\n                options.lookup(q, function (data) {\n                    that.suggestions = data.suggestions;\n                    that.suggest();\n                    options.onSearchComplete.call(that.element, q, data.suggestions);\n                });\n                return;\n            }\n\n            if (that.isLocal) {\n                response = that.getSuggestionsLocal(q);\n            } else {\n                if ($.isFunction(serviceUrl)) {\n                    serviceUrl = serviceUrl.call(that.element, q);\n                }\n                cacheKey = serviceUrl + '?' + $.param(params || {});\n                response = that.cachedResponse[cacheKey];\n            }\n\n            if (response && $.isArray(response.suggestions)) {\n                that.suggestions = response.suggestions;\n                that.suggest();\n                options.onSearchComplete.call(that.element, q, response.suggestions);\n            } else if (!that.isBadQuery(q)) {\n                that.abortAjax();\n\n                ajaxSettings = {\n                    url: serviceUrl,\n                    data: params,\n                    type: options.type,\n                    dataType: options.dataType\n                };\n\n                $.extend(ajaxSettings, options.ajaxSettings);\n\n                that.currentRequest = $.ajax(ajaxSettings).done(function (data) {\n                    var result;\n                    that.currentRequest = null;\n                    result = options.transformResult(data, q);\n                    that.processResponse(result, q, cacheKey);\n                    options.onSearchComplete.call(that.element, q, result.suggestions);\n                }).fail(function (jqXHR, textStatus, errorThrown) {\n                    options.onSearchError.call(that.element, q, jqXHR, textStatus, errorThrown);\n                });\n            } else {\n                options.onSearchComplete.call(that.element, q, []);\n            }\n        },\n\n        isBadQuery: function (q) {\n            if (!this.options.preventBadQueries){\n                return false;\n            }\n\n            var badQueries = this.badQueries,\n                i = badQueries.length;\n\n            while (i--) {\n                if (q.indexOf(badQueries[i]) === 0) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        hide: function () {\n            var that = this,\n                container = $(that.suggestionsContainer);\n\n            if ($.isFunction(that.options.onHide) && that.visible) {\n                that.options.onHide.call(that.element, container);\n            }\n\n            that.visible = false;\n            that.selectedIndex = -1;\n            clearTimeout(that.onChangeTimeout);\n            $(that.suggestionsContainer).hide();\n            that.signalHint(null);\n        },\n\n        suggest: function () {\n            if (!this.suggestions.length) {\n                if (this.options.showNoSuggestionNotice) {\n                    this.noSuggestions();\n                } else {\n                    this.hide();\n                }\n                return;\n            }\n\n            var that = this,\n                options = that.options,\n                groupBy = options.groupBy,\n                formatResult = options.formatResult,\n                value = that.getQuery(that.currentValue),\n                className = that.classes.suggestion,\n                classSelected = that.classes.selected,\n                container = $(that.suggestionsContainer),\n                noSuggestionsContainer = $(that.noSuggestionsContainer),\n                beforeRender = options.beforeRender,\n                html = '',\n                category,\n                formatGroup = function (suggestion, index) {\n                        var currentCategory = suggestion.data[groupBy];\n\n                        if (category === currentCategory){\n                            return '';\n                        }\n\n                        category = currentCategory;\n\n                        return options.formatGroup(suggestion, category);\n                    };\n\n            if (options.triggerSelectOnValidInput && that.isExactMatch(value)) {\n                that.select(0);\n                return;\n            }\n\n            // Build suggestions inner HTML:\n            $.each(that.suggestions, function (i, suggestion) {\n                if (groupBy){\n                    html += formatGroup(suggestion, value, i);\n                }\n\n                html += '<div class=\"' + className + '\" data-index=\"' + i + '\">' + formatResult(suggestion, value, i) + '</div>';\n            });\n\n            this.adjustContainerWidth();\n\n            noSuggestionsContainer.detach();\n            container.html(html);\n\n            if ($.isFunction(beforeRender)) {\n                beforeRender.call(that.element, container, that.suggestions);\n            }\n\n            that.fixPosition();\n            container.show();\n\n            // Select first value by default:\n            if (options.autoSelectFirst) {\n                that.selectedIndex = 0;\n                container.scrollTop(0);\n                container.children('.' + className).first().addClass(classSelected);\n            }\n\n            that.visible = true;\n            that.findBestHint();\n        },\n\n        noSuggestions: function() {\n             var that = this,\n                 beforeRender = that.options.beforeRender,\n                 container = $(that.suggestionsContainer),\n                 noSuggestionsContainer = $(that.noSuggestionsContainer);\n\n            this.adjustContainerWidth();\n\n            // Some explicit steps. Be careful here as it easy to get\n            // noSuggestionsContainer removed from DOM if not detached properly.\n            noSuggestionsContainer.detach();\n\n            // clean suggestions if any\n            container.empty(); \n            container.append(noSuggestionsContainer);\n\n            if ($.isFunction(beforeRender)) {\n                beforeRender.call(that.element, container, that.suggestions);\n            }\n\n            that.fixPosition();\n\n            container.show();\n            that.visible = true;\n        },\n\n        adjustContainerWidth: function() {\n            var that = this,\n                options = that.options,\n                width,\n                container = $(that.suggestionsContainer);\n\n            // If width is auto, adjust width before displaying suggestions,\n            // because if instance was created before input had width, it will be zero.\n            // Also it adjusts if input width has changed.\n            if (options.width === 'auto') {\n                width = that.el.outerWidth();\n                container.css('width', width > 0 ? width : 300);\n            } else if(options.width === 'flex') {\n                // Trust the source! Unset the width property so it will be the max length\n                // the containing elements.\n                container.css('width', '');\n            }\n        },\n\n        findBestHint: function () {\n            var that = this,\n                value = that.el.val().toLowerCase(),\n                bestMatch = null;\n\n            if (!value) {\n                return;\n            }\n\n            $.each(that.suggestions, function (i, suggestion) {\n                var foundMatch = suggestion.value.toLowerCase().indexOf(value) === 0;\n                if (foundMatch) {\n                    bestMatch = suggestion;\n                }\n                return !foundMatch;\n            });\n\n            that.signalHint(bestMatch);\n        },\n\n        signalHint: function (suggestion) {\n            var hintValue = '',\n                that = this;\n            if (suggestion) {\n                hintValue = that.currentValue + suggestion.value.substr(that.currentValue.length);\n            }\n            if (that.hintValue !== hintValue) {\n                that.hintValue = hintValue;\n                that.hint = suggestion;\n                (this.options.onHint || $.noop)(hintValue);\n            }\n        },\n\n        verifySuggestionsFormat: function (suggestions) {\n            // If suggestions is string array, convert them to supported format:\n            if (suggestions.length && typeof suggestions[0] === 'string') {\n                return $.map(suggestions, function (value) {\n                    return { value: value, data: null };\n                });\n            }\n\n            return suggestions;\n        },\n\n        validateOrientation: function(orientation, fallback) {\n            orientation = $.trim(orientation || '').toLowerCase();\n\n            if($.inArray(orientation, ['auto', 'bottom', 'top']) === -1){\n                orientation = fallback;\n            }\n\n            return orientation;\n        },\n\n        processResponse: function (result, originalQuery, cacheKey) {\n            var that = this,\n                options = that.options;\n\n            result.suggestions = that.verifySuggestionsFormat(result.suggestions);\n\n            // Cache results if cache is not disabled:\n            if (!options.noCache) {\n                that.cachedResponse[cacheKey] = result;\n                if (options.preventBadQueries && !result.suggestions.length) {\n                    that.badQueries.push(originalQuery);\n                }\n            }\n\n            // Return if originalQuery is not matching current query:\n            if (originalQuery !== that.getQuery(that.currentValue)) {\n                return;\n            }\n\n            that.suggestions = result.suggestions;\n            that.suggest();\n        },\n\n        activate: function (index) {\n            var that = this,\n                activeItem,\n                selected = that.classes.selected,\n                container = $(that.suggestionsContainer),\n                children = container.find('.' + that.classes.suggestion);\n\n            container.find('.' + selected).removeClass(selected);\n\n            that.selectedIndex = index;\n\n            if (that.selectedIndex !== -1 && children.length > that.selectedIndex) {\n                activeItem = children.get(that.selectedIndex);\n                $(activeItem).addClass(selected);\n                return activeItem;\n            }\n\n            return null;\n        },\n\n        selectHint: function () {\n            var that = this,\n                i = $.inArray(that.hint, that.suggestions);\n\n            that.select(i);\n        },\n\n        select: function (i) {\n            var that = this;\n            that.hide();\n            that.onSelect(i);\n        },\n\n        moveUp: function () {\n            var that = this;\n\n            if (that.selectedIndex === -1) {\n                return;\n            }\n\n            if (that.selectedIndex === 0) {\n                $(that.suggestionsContainer).children().first().removeClass(that.classes.selected);\n                that.selectedIndex = -1;\n                that.el.val(that.currentValue);\n                that.findBestHint();\n                return;\n            }\n\n            that.adjustScroll(that.selectedIndex - 1);\n        },\n\n        moveDown: function () {\n            var that = this;\n\n            if (that.selectedIndex === (that.suggestions.length - 1)) {\n                return;\n            }\n\n            that.adjustScroll(that.selectedIndex + 1);\n        },\n\n        adjustScroll: function (index) {\n            var that = this,\n                activeItem = that.activate(index);\n\n            if (!activeItem) {\n                return;\n            }\n\n            var offsetTop,\n                upperBound,\n                lowerBound,\n                heightDelta = $(activeItem).outerHeight();\n\n            offsetTop = activeItem.offsetTop;\n            upperBound = $(that.suggestionsContainer).scrollTop();\n            lowerBound = upperBound + that.options.maxHeight - heightDelta;\n\n            if (offsetTop < upperBound) {\n                $(that.suggestionsContainer).scrollTop(offsetTop);\n            } else if (offsetTop > lowerBound) {\n                $(that.suggestionsContainer).scrollTop(offsetTop - that.options.maxHeight + heightDelta);\n            }\n\n            if (!that.options.preserveInput) {\n                that.el.val(that.getValue(that.suggestions[index].value));\n            }\n            that.signalHint(null);\n        },\n\n        onSelect: function (index) {\n            var that = this,\n                onSelectCallback = that.options.onSelect,\n                suggestion = that.suggestions[index];\n\n            that.currentValue = that.getValue(suggestion.value);\n\n            if (that.currentValue !== that.el.val() && !that.options.preserveInput) {\n                that.el.val(that.currentValue);\n            }\n\n            that.signalHint(null);\n            that.suggestions = [];\n            that.selection = suggestion;\n\n            if ($.isFunction(onSelectCallback)) {\n                onSelectCallback.call(that.element, suggestion);\n            }\n        },\n\n        getValue: function (value) {\n            var that = this,\n                delimiter = that.options.delimiter,\n                currentValue,\n                parts;\n\n            if (!delimiter) {\n                return value;\n            }\n\n            currentValue = that.currentValue;\n            parts = currentValue.split(delimiter);\n\n            if (parts.length === 1) {\n                return value;\n            }\n\n            return currentValue.substr(0, currentValue.length - parts[parts.length - 1].length) + value;\n        },\n\n        dispose: function () {\n            var that = this;\n            that.el.off('.autocomplete').removeData('autocomplete');\n            $(window).off('resize.autocomplete', that.fixPositionCapture);\n            $(that.suggestionsContainer).remove();\n        }\n    };\n\n    // Create chainable jQuery plugin:\n    $.fn.devbridgeAutocomplete = function (options, args) {\n        var dataKey = 'autocomplete';\n        // If function invoked without argument return\n        // instance of the first matched element:\n        if (!arguments.length) {\n            return this.first().data(dataKey);\n        }\n\n        return this.each(function () {\n            var inputElement = $(this),\n                instance = inputElement.data(dataKey);\n\n            if (typeof options === 'string') {\n                if (instance && typeof instance[options] === 'function') {\n                    instance[options](args);\n                }\n            } else {\n                // If instance already exists, destroy it:\n                if (instance && instance.dispose) {\n                    instance.dispose();\n                }\n                instance = new Autocomplete(this, options);\n                inputElement.data(dataKey, instance);\n            }\n        });\n    };\n\n    // Don't overwrite if it already exists\n    if (!$.fn.autocomplete) {\n        $.fn.autocomplete = $.fn.devbridgeAutocomplete;\n    }\n}));\n"]}